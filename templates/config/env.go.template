package config

import (
	"fmt"
	"os"
)

type envConfig struct {
	Port               string
	PostgresqlUrl      string
	RedisURL           string
	RedisPassword      string
	RabbitMQUrl        string
	AwsS3Bucket        string
	CloudFrontUrl      string
}

var Env envConfig

// getEnv retrieves the value of the environment variable or panics if not set
func getEnv(varName string) string {
	value, exists := os.LookupEnv(varName)
	if !exists {
		panic(fmt.Sprintf("%s must be set", varName))
	}
	return value
}

// getOptEnv retrieves the value of the environment variable or returns a default value if not set
func getOptEnv(varName, defaultValue string) string {
	value, exists := os.LookupEnv(varName)
	if !exists {
		return defaultValue
	}
	return value
}

// InitConfig initializes the configuration from environment variables
func InitConfig() {
	Env = envConfig{
		Port:              getOptEnv("PORT", "8080"),
		PostgresqlUrl:     getEnv("POSTGRESQL_URL"),
		AwsS3Bucket:       getOptEnv("AWS_S3_BUCKET", ""),
		CloudFrontUrl:     getOptEnv("AWS_CLOUDFRONT_URL", ""),
		RedisURL:          getEnv("REDIS_URL"),
		RedisPassword:     getEnv("REDIS_PASSWORD"),
		RabbitMQUrl:       getOptEnv("RABBITMQ_URL", ""),
	}
}
