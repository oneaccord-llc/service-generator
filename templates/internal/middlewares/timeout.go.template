package middlewares

import (
	"context"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"go.uber.org/zap"
)

// This function handles the custom logic for context timeout
// It sets the context timeout to 10 seconds
// also creates a new context at every Request
func ContextTimeout(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		ctx, cancel := context.WithTimeout(c.Request().Context(), 10*time.Second)
		defer cancel()

		c.SetRequest(c.Request().WithContext(ctx))

		// Call the next handler
		err := next(c)

		// Check if the context has timed out
		if ctx.Err() == context.DeadlineExceeded {
			zap.L().Error(c.Path(), zap.Error(ctx.Err()))
			return echo.NewHTTPError(http.StatusRequestTimeout, "Timeout Exceeded")
		}

		return err
	}
}
